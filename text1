#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
void A();
void E();
void T();
void E1();
void T1();
void F();
void V();

char s[50];n='1';//输入的表达式
char Table[50][3];//字符表
int SIGN,sym;//SIGN为表达式是否错误信号量，sym为读取下标
int list_n=0;//字符表下标

int main()
{
    SIGN=0;
    sym=0;
    scanf("%s",&s);
    if(s[0]=='\0')//无输入退出
        return 0;
    A();
    if(s[sym]!='\0'&&SIGN==0)
    {
        printf("ERROR!\n");
        exit(0);
    }
    return 0;
}

void A()
{
    V();
    if(s[sym]==':'&&s[sym+1]=='=')
    {
        sym+=2;
        E();
        printf("%s:=%s",Table[list_n-2],Table[list_n-1]);
        printf("  (:=,%s,-,%s)\n",Table[list_n-1],Table[n-2]);
    }else
    {
        printf("spelling error!\n");//:=拼写错误
        SIGN=1;
        exit(0);
    }
}

void V()
{
    if(islower(s[sym]))
    {
        Table[list_n][0]=s[sym];
        Table[list_n][1]='\0';
        list_n++;
        sym++;
    }else
    {
        printf("operand error!\n");//运算对象错误
        SIGN=1;
        exit(0);
    }
}

void E()
{
    if(SIGN==0)
    {
        T();
        E1();
    }
}

void T()
{
    if(SIGN==0)
    {
        F();
        T1();
    }
}

void F()
{
    if(SIGN==0)
    {
        if(s[sym]=='(')
        {
            sym++;
            E();
            if(s[sym]==')')
                sym++;
            else
            {
                printf("ERROR!\n");
                SIGN=1;
                exit(0);
            }
        }else if(islower(s[sym]))
        {
            V();
        }else
        {
            printf("ERROR!\n");
            SIGN=1;
            exit(0);
        }
    }
}
void E1()
{
    int p;
    if(SIGN==0)
    {
        if(s[sym]=='+'||s[sym]=='-')
        {
            p=sym;
            sym++;
            T();
            char ch[3];
            ch[0]='T';
            ch[1]=n;
            ch[2]='\0';
            if(s[p]=='+')
            {
                printf("%s:=%s+%s",ch,Table[list_n-2],Table[list_n-1]);
                printf(" (+,%s,%s,%s)\n",Table[list_n-2],Table[list_n-1],ch);
            }else
            {
                printf("%s:=%s-%s",ch,Table[list_n-2],Table[list_n-1]);
                printf("  (-,%s,%s,%s)\n",Table[list_n-2],Table[list_n-1],ch);
            }
            strcpy(Table[list_n-2],ch);
            list_n--;
            n++;
            E1();
        }
    }
}

void T1()
{
    int p;
    if(SIGN==0)
    {
        if(s[sym]=='*'||s[sym]=='/')
        {
            p=sym;
            sym++;
            F();
            char ch[3];
            ch[0]='T';
            ch[1]=n;
            ch[2]='\0';
            if(s[p]=='*')
            {
                printf("%s:=%s*%s",ch,Table[list_n-2],Table[list_n-1]);
                printf("  (*,%s,%s,%s)\n",Table[list_n-2],Table[list_n-1],ch);
            }else
            {
                printf("%s:=%s/%s",ch,Table[list_n-2],Table[list_n-1]);
                printf("  (/,%s,%s,%s)\n",Table[list_n-2],Table[list_n-1],ch);
            }
            strcmp(Table[list_n-2],ch);
            list_n--;
            n++;
            T1();
        }
    }
}
